//Recursive

int solver(int i,int j,int arr[])
    {
        if(i==j)
        return 0;
        
        int mini=1e9;
        for(int k=i;k<=j-1;k++)
        {
            int steps=arr[i-1]*arr[k]*arr[j] + solver(i,k,arr)+solver(k+1,j,arr);
            mini=min(mini,steps);
        }
        return mini;
    }
    int matrixMultiplication(int N, int arr[])
    {
        // code here
        return solver(1,N-1,arr);
    }
//Memoization
*int solver(int i,int j,int arr[],vector<vector<int>> &dp)
    {
        if(i==j)
        return 0;
        if(dp[i][j]!=-1)
        return dp[i][j];
        
        int mini=1e9;
        
        for(int k=i;k<=j-1;k++)
        {
            int steps=arr[i-1]*arr[k]*arr[j] + solver(i,k,arr,dp)+solver(k+1,j,arr,dp);
            mini=min(mini,steps);
        }
        return dp[i][j]=mini;  
    }
    int matrixMultiplication(int N, int arr[])
    {
        // code here
        vector<vector<int>> dp(N,vector<int>(N,-1));
        
        return solver(1,N-1,arr,dp);
    }*/
    //Tabulation
    int matrixMultiplication(int N, int arr[])
    {
        int dp[N][N];
        for(int i=1;i<N;i++)
        {
            dp[i][i]=0;
        }
        
        for(int i=N-1;i>=1;i--)
        {
            for(int j=i+1;j<N;j++)
            {
                int mini=1e9;
                for(int k=i;k<=j-1;k++)
                {
                    int steps=arr[i-1]*arr[k]*arr[j] +dp[i][k]+dp[k+1][j];
                    mini=min(mini,steps);
                }
               dp[i][j]=mini;  
            
            }
        }
        return dp[1][N-1];
    }
