int solver(int i,int j,string s, vector<vector<int>> &dp)
    {
        if(j<0 || i>s.size()-1)
        return 0;
        if(dp[i][j]!=-1)
        return dp[i][j];
        
        if(s[i]==s[j])
        return dp[i][j]=1+ solver(i+1,j-1,s,dp);
        return dp[i][j]=0+max(solver(i+1,j,s,dp),solver(i,j-1,s,dp));
    }
    int longestPalindromeSubseq(string s) 
    {
        int n=s.size();
        vector<vector<int>> dp(n,vector<int>(n,-1));
        
        return solver(0,n-1,s,dp);
    }*/
    int longestPalindromeSubseq(string r) 
    {
        
        int n=r.size();
        string s=r;
        reverse(r.begin(),r.end());
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        for(int i=0;i<=n;i++)
        {
            dp[i][0]=0;
            dp[0][i]=0;
            
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(s[i-1]==r[j-1])
                {
                    dp[i][j]=1+dp[i-1][j-1];
                    
                }
                else
                {
                    dp[i][j]=max(dp[i][j-1],dp[i-1][j]);
                }
            }
       }                     
        return dp[n][n];                                            
                       
           
    }
