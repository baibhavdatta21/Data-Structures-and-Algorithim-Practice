//1.By normal recursion
//TC->O(2^n)
//SC->O(n)

#include<iostream>
#include<vector>
using namespace std;

/*int fib(int n)
{
    if(n<=1)
    {
        return n;
    }

    return fib(n-1)+fib(n-2);
}*/     

//Memoization methord  
//TC->O(n) 
//SC->(O(n)+O(n))~ O(n) (recursion stack space && array)

/*int fib(int n, vector<int> &dp)
{
    if(n<=1)
    return n;

    if(dp[n]!=-1)
    return dp[n];

    return dp[n]=fib((n-1),dp)+fib((n-2),dp);

}*/    
*/ 
//Tabular methord
//TC->O(n) 
//SC:O(n)(Only the array space)

int main()
{
    int n;
    cin>>n;
    /*vector<int> dp(n+1,-1);
    dp[0]=0;dp[1]=1;
    for(int i=2;i<=n;i++)
    {
        dp[i]=dp[i-1]+dp[i-2];
    }
    //cout<<fib(n,dp); 
    
    //most optimised 
    //TC->O(n)   
    //SC->less er just 3 variables are used
    
    int prev1=1;
    int prev2=0;
    for(int i=2;i<=n;i++)
    {
        int val=prev2+prev1;
        prev2=prev1;
        prev1=val;
    }
    cout<<prev1;       
}
