/*int solver(int i,int j, vector<int>& nums,vector<vector<int>>&dp)
    {
        if(i>j)
        return 0;
        if(dp[i][j]!=-1)
        return dp[i][j];
        int maxi=INT_MIN;
        for(int k=i;k<=j;k++)
        {
            int dum=nums[k];
            int val=nums[i-1]*nums[k]*nums[j+1]+solver(i,k-1,nums,dp)+solver(k+1,j,nums,dp);
            maxi=max(maxi,val);
        }

        return dp[i][j]=maxi;
    }
    int maxCoins(vector<int>& nums) 
    {
        int n=nums.size();
        nums.insert(nums.begin(),1);
        nums.push_back(1);
        vector<vector<int>>dp(n+1,vector<int>(n+1,-1));
        return solver(1,n,nums,dp);
    }*/
    int maxCoins(vector<int>& nums) 
    {
        int n=nums.size();
        nums.insert(nums.begin(),1);
        nums.push_back(1);
        vector<vector<int>>dp(n+2,vector<int>(n+2,0));
        for(int i=n;i>=1;i--)
        {
            for(int j=1;j<=n;j++)
            {
                if(i>j)
                continue;
                int maxi=INT_MIN;
                for(int k=i;k<=j;k++)
                {
                    int dum=nums[k];
                    int val=nums[i-1]*nums[k]*nums[j+1]+dp[i][k-1]+dp[k+1][j];
                    maxi=max(maxi,val);
                }
                dp[i][j]=maxi;
            }
        
        }
        for(int i=0;i<n+2;i++)
        {
            for(int j=0;j<n+2;j++)
            {
                cout<<dp[i][j]<<" ";
            }
            cout<<"\n";
        }
        return dp[1][n];
        
    }
