//Recursion
//Tc->exponential
//Sc->recursive stack space
/*int solver(int i,bool picked,vector<int>& prices,int fee)
{
    if(i==prices.size())
    return 0;
    
    int profit;
    if(picked==false)
    {
        profit=max(-prices[i]+solver(i+1,true,prices,fee),solver(i+1,picked,prices,fee));
    }
                   
    else
    {
        profit=max(prices[i]-fee+solver(i+1,false,prices,fee),solver(i+1,picked,prices,fee));
    }
    return profit;
}
int maxProfit(vector<int>& prices, int fee) 
{
    return solver(0,false,prices,fee);
}*/
//Memoization
//Tc->O(N*2)
//Sc->recursive stack space+O(N*2)
/*int solver(int i,bool picked,vector<int>& prices,int fee,vector<vector<int>>&dp)
{
    if(i==prices.size())
    return 0;
    
    
    if(dp[i][picked]!=-1)
    return dp[i][picked];
    int profit;
    if(picked==false)
    {
        profit=max(-prices[i]+solver(i+1,true,prices,fee,dp),solver(i+1,picked,prices,fee,dp));
    }
                   
    else
    {
        profit=max(prices[i]-fee+solver(i+1,false,prices,fee,dp),solver(i+1,picked,prices,fee,dp));
    }
    return dp[i][picked]=profit;
}
int maxProfit(vector<int>& prices, int fee) 
{
    int n=prices.size();
    vector<vector<int>>dp(n+1,vector<int>(2,-1));
    return solver(0,false,prices,fee,dp);
}*/

//Tabulation
//Tc->O(N*2)
//Sc->O(N*2)
/*int maxProfit(vector<int>& prices, int fee) 
{
    int n=prices.size();
    vector<vector<int>>dp(n+1,vector<int>(2,0));
    for(int i=n-1;i>=0;i--)
    {
        for(int j=1;j>=0;j--)
        {
            int profit;
            if(j==false)
            {
                profit=max(-prices[i]+dp[i+1][true],dp[i+1][j]);
            }

            else
            {
                profit=max(prices[i]-fee+dp[i+1][false],dp[i+1][j]);
            }
            dp[i][j]=profit;
        }
    }
    return dp[0][0];
}*/
//Tabulation with space opti
//Tc->O(N*2)
//Sc->O(2)+O(2)

int maxProfit(vector<int>& prices, int fee) 
{
    int n=prices.size();
    //vector<vector<int>>dp(n+1,vector<int>(2,0));
    vector<int>prev(2,0);
    vector<int>cur(2,0);
    
    for(int i=n-1;i>=0;i--)
    {
        for(int j=1;j>=0;j--)
        {
            int profit;
            if(j==false)
            {
                profit=max(-prices[i]+prev[true],prev[j]);
            }

            else
            {
                profit=max(prices[i]-fee+prev[false],prev[j]);
            }
            cur[j]=profit;
        }
        prev=cur;
    }
    return prev[0];
}
