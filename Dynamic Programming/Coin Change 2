//Recursion
//Tc->O(3^n)
//Sc->O(N) [stack->space]
int solver(int i,vector<int>& coins,int amount)
    {
        if(amount==0)
        {
            return 1;
        }
        if(i==0)
        {
            if(amount%coins[i]==0)
            return 1;
            else
            return 0;
        }
        int pick=0;
        if(amount>=coins[i])
        pick=solver(i,coins,amount-coins[i]);
        int not_pick=solver(i-1,coins,amount);
        return pick+not_pick;
        
    }
    int change(int amount, vector<int>& coins) 
    {
        int n=coins.size();
        return solver(n-1,coins,amount);
    }
 //Memoization
 //Tc->O(N*M)
//Sc->O(N)+O(N*M) 
int solver(int i,vector<int>& coins,int amount,vector<vector<int>> &dp)
    {
        if(amount==0)
        {
            return 1;
        }
        if(i==0)
        {
            if(amount%coins[i]==0)
            return 1;
            else
            return 0;
        }
        if(dp[i][amount]!=-1)
        return dp[i][amount];
        int pick=0;
        if(amount>=coins[i])
        pick=solver(i,coins,amount-coins[i],dp);
        int not_pick=solver(i-1,coins,amount,dp);
        return dp[i][amount]=pick+not_pick;
        
    }
    int change(int amount, vector<int>& coins) 
    {
        int n=coins.size();
        vector<vector<int>> dp(n,vector<int>(amount+1,-1));
        return solver(n-1,coins,amount,dp);
    }
//Tabulation
//Tc->O(N*M)
//Sc->O(N*M) 
    int change(int amount, vector<int>& coins) 
    {
        int n=coins.size();
        vector<vector<int>> dp(n,vector<int>(amount+1,0));
        for(int i=0;i<n;i++)
        {
            dp[i][0]=1;
        }
        
        for(int i=0;i<=amount;i++)
        {
            if(i%coins[0]==0)
            dp[0][i] = 1;
        }
        
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<=amount;j++)
            {
                int pick=0;
                if(j>=coins[i])
                pick=dp[i][j-coins[i]];
                int not_pick=dp[i-1][j];
                dp[i][j]=pick+not_pick;
                
            }
        }
        
        
        return dp[n-1][amount];
    }
    
 //Tabulation with space optimization
//Tc->O(M)+O(M)
//Sc->O(N*M) 
int change(int amount, vector<int>& coins) 
    {
        int n=coins.size();
        //vector<vector<int>> dp(n,vector<int>(amount+1,0));
        vector<int>prev(amount+1,0);
        vector<int>curr(amount+1,0);
        for(int i=0;i<n;i++)
        {
            prev[0]=1;
        }
        
        for(int i=0;i<=amount;i++)
        {
            if(i%coins[0]==0)
            prev[i] = 1;
        }
        
        for(int i=1;i<n;i++)
        {
            for(int j=0;j<=amount;j++)
            {
                int pick=0;
                if(j>=coins[i])
                pick=curr[j-coins[i]];
                int not_pick=prev[j];
                curr[j]=pick+not_pick;
                
            }
            prev=curr;
        }
        return prev[amount];
    }
