/*int solver(int i,int j, int arr[],vector<vector<int>>&dp)
    {
        if(i==j)
        return 0;
        
        if(dp[i][j]!=-1)
        return dp[i][j];
        int m=1e9;
        for(int k=i;k<j;k++)
        {
             int s=(arr[i-1]*arr[k]*arr[j])+solver(i,k,arr,dp)+solver(k+1,j,arr,dp);
             m=min(m,s);
        }
        return dp[i][j]=m;
    }
    int matrixMultiplication(int n, int arr[])
    {
        // code here
         vector<vector<int>>dp(n,vector<int>(n,-1));
         return solver(1,n-1,arr,dp);
         
    }*/
    int matrixMultiplication(int n, int arr[])
    {
        vector<vector<int>>dp(n,vector<int>(n,0));
        for(int i=0;i<n;i++)
        dp[i][i]=0;
        for(int i=n-1;i>=1;i--)
        {
            for(int j=i+1;j<n;j++)
            {
                int m=1e9;
                for(int k=i;k<j;k++)
                {
                    int s=(arr[i-1]*arr[k]*arr[j])+dp[i][k]+dp[k+1][j];
                    m=min(m,s);
                }
                dp[i][j]=m;
            }
            // for(int i=0;i<n;i++)
            // {
            //     for(int j=0;j<n;j++)
            //     {
            //         cout<<dp[i][j]<<" ";
            //     }
            //     cout<<endl;;
            // }
        }
        cout<<dp.size()<<" "<<n<<" "<<dp[0].size();
        // 0 0 0 0 
        // 0 0 0 0 
        // 0 0 0 0 
        // 0 0 0 0 
        // 0 0 0 0 
        // 0 0 0 0 
        // 0 0 0 9000 
        // 0 0 0 0 
        // 0 0 0 0 
        // 0 0 1500 4500 
        // 0 0 0 9000 
        // 0 0 0 0
        
        return dp[1][n-1];
    }
