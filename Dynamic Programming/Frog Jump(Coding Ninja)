#include<bits/stdc++.h>
//Normal recursion
//TC->Exponential
//SC->O(1)
/*int jump(int index,vector<int> &heights)
{
    if(index==0)
    return 0;
    
    
    int l=jump(index-1,heights)+abs(heights[index]-heights[index-1]);
    int h=INT_MAX;
    if(index>1)
    h=jump(index-2,heights)+abs(heights[index]-heights[index-2]);
    return min(l,h);    
        
}
int frogJump(int n, vector<int> &heights)
{
    // Write your code here.
    return jump(n-1,heights);
    
}*/

//Memoization approach
//TC->O(N)
//SC->O(N)+O(N)

/*int jump(int index,vector<int> &dp,vector<int>&heights)
{
    if(index==0)
    return 0;
    
    if(dp[index]!=-1)
    return dp[index];
    
    int l=jump(index-1,dp,heights)+abs(heights[index]-heights[index-1]);
    int h=INT_MAX;
    if(index>1)
    h=jump(index-2,dp,heights)+abs(heights[index]-heights[index-2]);
    return dp[index]=min(l,h);
}
int frogJump(int n, vector<int> &heights)
{
    vector<int> dp(n,-1);
    return jump(n-1,dp,heights);
    
}*/

//Tabular Methord
//TC->O(N)
//SC->O(N)
/*int frogJump(int n, vector<int> &heights)
{
    vector<int>dp(n,0);
    dp[0]=0;
    for(int i=1;i<n;i++)
    {
        int f=dp[i-1]+abs(heights[i]-heights[i-1]);
        int h=INT_MAX;
        if(i>1)
        {
            h=dp[i-2]+abs(heights[i]-heights[i-2]);
        }
        dp[i]=min(f,h);
    }
    return dp[n-1];
}*/

//More space optimied
//TC->O(N)
//SC->O(1)
/*int frogJump(int n, vector<int> &heights)
{
    
   int prev1=0;
   int prev2=0;
   int curr;
    for(int i=1;i<n;i++)
    {
        int f=prev1+abs(heights[i]-heights[i-1]);
        int h=INT_MAX;
        if(i>1)
        {
            h=prev2+abs(heights[i]-heights[i-2]);
        }
        
        
        curr=min(f,h);
        prev2=prev1;
        prev1=curr;
        
    }
    return curr;
    
}   */
