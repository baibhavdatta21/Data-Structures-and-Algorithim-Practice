//Tc->O(n^2)*(lengths of strings)

static bool compare(string &s1,string &s2) 
      {          
            return s1.size() < s2.size(); 
      } 
    bool isSub(string a,string b)
    {
        int n=a.size();
        int m=b.size();
        int i=0;
        int j=0;
        while(j<m)
        {
            if(a[i]==b[j])
                i++;
            if(i==n)
            {
                return true;
            }
            j++;
        }
        return false;
    }
     int longestStrChain(vector<string>& words)
     {
         int n=words.size();
         if(n==1)
         return 1;
         sort(words.begin(),words.end(),compare);
         /*for(auto it:words)
         {
             cout<<it<<endl;
         }*/
         vector<int>dp(n,1);
         int maxi=0;
         for(int i=1;i<n;i++)
         {
             for(int j=0;j<i;j++)
             {
                 if(words[i].size()==words[j].size()+1 && dp[i]<1+dp[j])
                 {
                     if(isSub(words[j],words[i]))
                     {
                         dp[i]=1+dp[j];
                     }
                 }
                 if(dp[i]>maxi)
                 maxi=dp[i];
             }
         }
         return maxi;
      } 
