    //Recursive
    //TC->exponential(2 to the power n)
    //SC->Stack space(O(N))[the roows length]
    
    /*int solver(int i,int j,int n,int m,vector<vector<int>>& triangle)
    {
        if(i==n)
        return triangle[i][j];
        
        int d=triangle[i][j]+solver(i+1,j,n,m,triangle);
        int dag=triangle[i][j]+solver(i+1,j+1,n,m,triangle);
        return min(d,dag);
    }
    int minimumTotal(vector<vector<int>>& triangle) 
    {              
        int n=triangle.size();
        int m=triangle[0].size();
        return solver(0,0,n-1,m-1,triangle);
    }*/
    
    //Memoization
    //TC->O(N*N)
    //SC->O(N)+O(N*N)
    
    /*int solver(int i,int j,int n,int m,vector<vector<int>>& triangle,vector<vector<int>>&dp) 
    {
        if(i==n)
        return triangle[i][j];
        
        if(dp[i][j]!=-1)
        return dp[i][j]; 
        int d=triangle[i][j]+solver(i+1,j,n,m,triangle,dp);
        int dag=triangle[i][j]+solver(i+1,j+1,n,m,triangle,dp);
        return dp[i][j]=min(d,dag);
    }
    int minimumTotal(vector<vector<int>>& triangle) 
    {              
        int n=triangle.size();
        int m=triangle[0].size();
        vector<vector<int>> dp(n,vector<int>(n,-1));
        return solver(0,0,n-1,m-1,triangle,dp);
    }*/
    
    //Tabulation
    //TC->O(N*N)
    //SC->O(N*N)
    
    /*int minimumTotal(vector<vector<int>>& triangle) 
    {
        int n=triangle.size();
        int m=triangle[0].size();
        vector<vector<int>> dp(n,vector<int>(n,-1));
        for(int j=0;j<n;j++)
        {
            dp[n-1][j]= triangle[n-1][j];
        }
        for(int i=n-2;i>=0;i--)
        {
            //m=triangle[i].size();
            for(int j=i;j>=0;j--)
            {
                int d=triangle[i][j]+dp[i+1][j];
                int dg=triangle[i][j]+dp[i+1][j+1];
                dp[i][j]=min(d,dg);
            }
        }
        return dp[0][0];

    }*/
    //Tabulation with space optimization
    //TC->O(N*N)
    //SC->O(N)+O(N)
    int minimumTotal(vector<vector<int>>& triangle) 
    {
        int n=triangle.size();
        int m=triangle[0].size();
        //vector<vector<int>> dp(n,vector<int>(n,-1));
        vector<int> front(n);
        for(int j=0;j<n;j++)
        {
            front[j]= triangle[n-1][j];
        }
        for(int i=n-2;i>=0;i--)
        {
            vector<int> curr(n);
            for(int j=i;j>=0;j--)
            {
                int d=triangle[i][j]+front[j];
                int dg=triangle[i][j]+front[j+1];
                curr[j]=min(d,dg);
            }
            front=curr;
        }
        return front[0];

    }
