*bool solver(int i,int j,string &s,string &p,vector<vector<int>>&dp)
    {
        if(i<0 && j<0)
        return true;
        if(i>=0 && j<0)
        return false;
        if(i<0 && j>=0)
        {
            for(int check=0;check<=j;check++)
            {
                if(p[check]!='*')
                return false;
            }
            return true;
        }
        if(dp[i][j]!=-1)
        return dp[i][j];
        
        if(s[i]==p[j] || p[j]=='?')
        return solver(i-1,j-1,s,p,dp);
        if(p[j]=='*')
        return solver(i,j-1,s,p,dp) | solver(i-1,j,s,p,dp);
        
        return false;
        
    }
    bool isMatch(string s, string p) 
    {
        int n=s.size();
        int m=p.size();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return solver(n-1,m-1,s,p,dp);
    }

    bool solver(int i,int j,string &s,string &p,vector<vector<int>>&dp)
    {
        if(i<0 && j<0)
        return true;
        if(i>=0 && j<0)
        return false;
        if(i<0 && j>=0)
        {
            for(int check=0;check<=j;check++)
            {
                if(p[check]!='*')
                return false;
            }
            return true;
        }
        if(dp[i][j]!=-1)
        return dp[i][j];
        
        if(s[i]==p[j] || p[j]=='?')
        return dp[i][j]=solver(i-1,j-1,s,p,dp);
        if(p[j]=='*')
        return dp[i][j]=solver(i,j-1,s,p,dp) | solver(i-1,j,s,p,dp);
        
        return dp[i][j]=false;
        
    }
    bool isMatch(string s, string p) 
    {
        int n=s.size();
        int m=p.size();
        vector<vector<int>>dp(n,vector<int>(m,-1));
        return solver(n-1,m-1,s,p,dp);
    }*/
    
   /* bool isMatch(string s, string p) 
    {
        int n=s.size();           //Size of input string
        int m=p.size();           //Size of pattern
        vector<vector<bool>>dp(n+1,vector<bool>(m+1,false)); //Defining the dp of bool type and of size n+1 and m+1.
        dp[0][0]=true;             //When both the arrays have exhausted
        
        for(int i=1;i<=n;i++)        
        dp[i][0]=false;            // When my input string is still present but my pattern string has exhausted
        
        for(int i=1;i<=m;i++)
        {
            bool flag=true;
            for(int check=1;check<=i;check++)
            {
               if(p[check-1]!='*') 
               {
                   flag=false;
                    break;
               }   
            }
          
            dp[0][i]=flag;        //When my input sting is exhuasted yet a situation is possible when we can still                                         //return a true, we can return a true if my pattern string is of only includes '*'
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=m;j++)  //Itrating through my dp
            {
                if(s[i-1]==p[j-1] || p[j-1]=='?') 
                dp[i][j]=dp[i-1][j-1]; // Situation when my characters are equal, we simply move on to the next one
                
                else if(p[j-1]=='*')
                dp[i][j]=dp[i][j-1] | dp[i-1][j]; //We are checking for differt situations of '*'
                else
                dp[i][j]=false;
            }
        }
         for(int i=0;i<=n;i++)
        {
            for(int j=0;j<=m;j++)  //Itrating through my dp
            {
                cout<<dp[i][j]<<" ";
            }
            cout<<endl;
        }
        return dp[n][m];        //FINALLY RETURNING
    }*/
