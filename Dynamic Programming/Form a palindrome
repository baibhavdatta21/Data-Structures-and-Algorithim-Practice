//Tabulation
//Tc->O(N*N)
//Sc->O(N*N)
int countMin(string r)
    {
        int n=r.size();
        string s=r;
        vector<vector<int>> dp(n+1,(vector<int>(n+1,0)));
        reverse(r.begin(),r.end());
        for(int i=0;i<n;i++)
        {
            dp[i][0]=dp[0][i]=0;
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(s[i-1]==r[j-1])
                {
                    dp[i][j]=1+dp[i-1][j-1];
                }
                else
                {
                    dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
                }
            }
        }
        //cout<<n;
        //cout<<dp[n][n];
        
        return n-dp[n][n];
    
    }*/
    //Tabulation with space optimization
    //Tc->O(N*N)
    //Sc->O(N)+O(N)
    int countMin(string r)
    {
        int n=r.size();
        string s=r;
        vector<int>prev(n+1,0);
        vector<int>cur (n+1,0);
        reverse(r.begin(),r.end());
        for(int i=0;i<=n;i++)
        {
            prev[i]=0;
        }
        for(int i=1;i<=n;i++)
        {
            for(int j=1;j<=n;j++)
            {
                if(s[i-1]==r[j-1])
                {
                    cur[j]=1+prev[j-1];
                }
                else
                {
                    cur[j]=max(prev[j],cur[j-1]);
                }
            }
            prev=cur;
        }
        return n-prev[n];
    }
