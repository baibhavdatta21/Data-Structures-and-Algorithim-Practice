//Recursion 
    //TC->exponential
    //SC->recursive stack space
    /*int solver(int i,bool pick,bool cooldown,vector<int>& prices)
    {
        if(i==prices.size())
        return 0;
        
        int profit;
        if(pick==false)
        {
            if(cooldown==false)
            profit=max(-prices[i]+solver(i+1,true,cooldown,prices),solver(i+1,pick,false,prices));
            else
            profit=solver(i+1,pick,false,prices);
        }
        else
        {
            profit=max(prices[i]+solver(i+1,false,true,prices),solver(i+1,pick,false,prices));
        }
        return profit;
    }   
    int maxProfit(vector<int>& prices) 
    {
        int n=prices.size();
        return solver(0,false,false,prices);
    }*/
    
    
    //Memoization 
    //TC->3d dp
    //SC->recursive stack space+O(N*2*3)
    /*int solver(int i,bool pick,bool cooldown,vector<int>& prices,vector<vector<vector<int>>>&dp)
    {
        if(i==prices.size())
        return 0;
        
        
        if(dp[i][pick][cooldown]!=-1)
        return dp[i][pick][cooldown];
            
        int profit;
        if(pick==false)
        {
            if(cooldown==false)
            profit=max(-prices[i]+solver(i+1,true,cooldown,prices,dp),solver(i+1,pick,false,prices,dp));
            else
            profit=solver(i+1,pick,false,prices,dp);
        }
        else
        {
            profit=max(prices[i]+solver(i+1,false,true,prices,dp),solver(i+1,pick,false,prices,dp));
        }
        return dp[i][pick][cooldown]=profit;
    }   
    int maxProfit(vector<int>& prices) 
    {
        int n=prices.size();
        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(2,-1)));
        return solver(0,false,false,prices,dp);
    }*/
    
    //Tabulation 
    //TC->O(N*2*3)3d dp
    //SC->O(N*2*3)
    /*int maxProfit(vector<int>& prices) 
    {
        int n=prices.size();
        vector<vector<vector<int>>>dp(n+1,vector<vector<int>>(2,vector<int>(2,0)));
        for(int i=0;i<2;i++)
        {
            for(int j=0;j<2;j++)
            {
                dp[n][i][j]=0;
            }
        }
        for(int i=n-1;i>=0;i--)
        {
            for(int j=1;j>=0;j--)
            {
                for(int k=1;k>=0;k--)
                {
                    int profit;
                    if(j==false)
                    {
                        if(k==false)
                        profit=max(-prices[i]+dp[i+1][true][k],dp[i+1][j][false]);
                        else
                        profit=dp[i+1][j][false];
                    }
                    else
                    {
                        profit=max(prices[i]+dp[i+1][false][true],dp[i+1][j][false]);
                    }
                    dp[i][j][k]=profit;
                }
            }
        }
        return dp[0][0][0];
    }*/
    
    //Recursion 
    //TC->exponential
    //SC->recursive stack space
    /*int solver(int i,int cool,vector<int>& prices)
    {
        if(i==prices.size())
        return 0;
        
        int profit;
        if(cool==1)
        {
            profit=max(-prices[i]+solver(i+1,2,prices),solver(i+1,cool,prices));
        }
        else if(cool==2)
        {
            profit=max(prices[i]+solver(i+1,3,prices),solver(i+1,cool,prices));
        }
        else
        {
            profit=solver(i+1,1,prices);
        }
        
        return profit;
    }
    int maxProfit(vector<int>& prices) 
    {
        //int n=nums.size();
        return solver(0,1,prices);
        
    }*/
    //Memoization 
    //TC->2d dp
    //SC->recursive stack space+O(N*3)
    /*int solver(int i,int cool,vector<int>& prices,vector<vector<int>>&dp)
    {
        if(i==prices.size())
        return 0;
        
        if(dp[i][cool]!=-1)
        return dp[i][cool];
        int profit;
        if(cool==0)
        {
            profit=max(-prices[i]+solver(i+1,1,prices,dp),solver(i+1,cool,prices,dp));
        }
        else if(cool==1)
        {
            profit=max(prices[i]+solver(i+1,2,prices,dp),solver(i+1,cool,prices,dp));
        }
        else
        {
            profit=solver(i+1,0,prices,dp);
        }
        
        return dp[i][cool]=profit;
    }
    int maxProfit(vector<int>& prices) 
    {
        int n=prices.size();
        vector<vector<int>>dp(n+1,vector<int>(3,-1));
        return solver(0,0,prices,dp);
        
    }*/
    
    //Tabulation 
    //TC->O(N*3)2d dp
    //SC->O(N*3)
    /*int maxProfit(vector<int>& prices) 
    {
        int n=prices.size();
        vector<vector<int>>dp(n+1,vector<int>(3,-1));
        
        for(int i=0;i<3;i++)
        {
            dp[n][i]=0;
        }
        for(int i=n-1;i>=0;i--)
        {
            for(int j=2;j>=0;j--)
            {
                int profit;
                if(j==0)
                {
                    profit=max(-prices[i]+dp[i+1][1],dp[i+1][j]);
                }
                else if(j==1)
                {
                    profit=max(prices[i]+dp[i+1][2],dp[i+1][j]);
                }
                else
                {
                    profit=dp[i+1][0];
                }

                dp[i][j]=profit;
            }
        }
        return dp[0][0];
    }*/
    //Tabulation 
    //TC->O(N*3)2 1d dps
    //SC->O(3*3)
    /*int maxProfit(vector<int>& prices) 
    {
        int n=prices.size();
        vector<int>prev(3,0);
        vector<int>cur(3,0);
      
        
        
        for(int i=n-1;i>=0;i--)
        {
            for(int j=2;j>=0;j--)
            {
                int profit;
                if(j==0)
                {
                    profit=max(-prices[i]+prev[1],prev[j]);
                }
                else if(j==1)
                {
                    profit=max(prices[i]+prev[2],prev[j]);
                }
                else
                {
                    profit=prev[0];
                }

                cur[j]=profit;
            }
            prev=cur;
        }
        return prev[0];
    }*/
    
    //Striver used a similar yet different methord 
    //here is the memoization
    int solver(int i,bool picked, vector<vector<int>>&dp,vector<int>& prices)
    {
        if(i>=prices.size())
        return 0;
        if(dp[i][picked]!=-1)
        return dp[i][picked];
        int profit;
        if(picked==false)
        {
            profit=max(-prices[i]+solver(i+1,true,dp,prices),solver(i+1,picked,dp,prices));
        }
        else
            
        {
            profit=max(prices[i]+solver(i+2,false,dp,prices),solver(i+1,picked,dp,prices));
        }
        return dp[i][picked]=profit;
    }
    int maxProfit(vector<int>& prices) 
    {
        int n=prices.size();
        vector<vector<int>>dp(n+1,vector<int>(2,-1));
        return solver(0,false,dp,prices);
    }
