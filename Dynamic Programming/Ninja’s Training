/*int solver(int indx,vector<vector<int>> &points,int last)
{
    if(indx==0)
    {
        int maxi=0;
        for(int i=0;i<3;i++)
        {
            if(i!=last)
            {
                maxi=max(points[0][i],maxi);
            }
        }
        return maxi;
    }
    
    int maxi=0;
    for(int i=0;i<3;i++)
    {
        if(i!=last)
        {
           	int sf=points[indx][i]+solver(indx-1,points,i);
            maxi=max(sf,maxi);
        }
     }
    return maxi;
 }
int ninjaTraining(int n, vector<vector<int>> &points)
  
{
    // Write your code here.
    return solver(n-1,points,3);
}*/

/*int solver(int indx,vector<vector<int>> &points,int last,vector<vector<int>> &dp)
{
    if(indx==0)
    {
        int maxi=0;
        for(int i=0;i<3;i++)
        {
            if(i!=last)
            {
                maxi=max(points[0][i],maxi);
            }
        }
        return maxi;
    }
    if(dp[indx][last]!=-1)
    return dp[indx][last];
    
    int maxi=0;
    for(int i=0;i<3;i++)
    {
        if(i!=last)
        {
           	int sf=points[indx][i]+solver(indx-1,points,i,dp);
            maxi=max(sf,maxi);
        }
     }
    return dp[indx][last]=maxi;
 }
int ninjaTraining(int n, vector<vector<int>> &points)
  
{
    // Write your code here.
    vector<vector<int>>dp(n,vector<int>(4,-1));
    return solver(n-1,points,3,dp);
}*/
int ninjaTraining(int n, vector<vector<int>> &points)
{
    vector<vector<int>>dp(n,vector<int>(4,0));
    dp[0][0]=max(points[0][1],points[0][2]);
    dp[0][1]=max(points[0][2],points[0][0]);
    dp[0][2]=max(points[0][0],points[0][1]);
    dp[0][3]=max(points[0][0],max(points[0][1],points[0][2]));
    
    for(int day=1;day<n;day++)
    {
        for(int last=0;last<4;last++)
        {
            dp[day][last]=0;
            
            for(int task=0;task<3;task++)
            {
                if(task!=last)
                {
                    int point=points[day][task]+dp[day-1][task];
                	dp[day][last]=max(dp[day][last],point);
                }   
            }
            
          }
    }
    return dp[n-1][3];
}
