//Brute Force 
//Recursion

/*int solver(int n,vector<int>& nums)
    {
        if(n==0)
        return nums[0];
        if(n<0)
        {
            return 0;
        }
        
        int pick=nums[n]+solver(n-2,nums);
        int not_pick=0+solver(n-1,nums);
        
        return max(pick,not_pick);
    }
    int rob2(vector<int>& nums) 
    {
        return solver(nums.size()-1,nums);
    }*/
    //Better
    //memoization
    /*int solver(int n,vector<int>& nums,vector<int> &dp)
    {
        if(n==0)
        return nums[0];
        if(n<0)
        return 0;
        
        if(dp[n]!=-1)
        return dp[n];
        
        int pick=nums[n]+solver(n-2,nums,dp);
        int not_pick=0+solver(n-1,nums,dp);
        
        return dp[n]=max(pick,not_pick);
        
    }
    int rob2(vector<int>& nums)
    {
        vector<int> dp(nums.size(),-1);
        return solver(nums.size()-1,nums,dp);
    }*/
    
    
    //Tabular methord
    
    
    /*int rob2(vector<int>& nums)
    {
        vector<int> dp(nums.size(),-1);
        dp[0]=nums[0];
        
        for(int i=1;i<nums.size();i++)
        {
            int pick=nums[i];
            if(i>1)
            {
                pick=pick+dp[i-2];
            }
            int not_pick=0+dp[i-1];
            
            dp[i]=max(pick,not_pick);
        }
        return dp[nums.size()-1];    
    }*/
    
    //Optimized Sols
    
    /*int rob2(vector<int>& nums)
    {
        int prev1=nums[0];
        int prev2=0;
        int curr;
        for(int i=1;i<nums.size();i++)
        {
            int pick=nums[i];
            if(i>1)
            {
                pick=pick+prev2;
            }
            int not_pick=0+prev1;
            
            curr=max(pick,not_pick);
            prev2=prev1;
            prev1=curr;
            
            
        }
        return prev1;   
    }*/
    
    
    /////This is must contain in all solution
    int rob(vector<int>& nums) 
    {
        if(nums.size()==1 || nums.size()==0 )
        return nums[0]; 
         
        vector<int> temp1;
        vector<int> temp2;
        
        for(int i=0;i<nums.size();i++)
        {
            if(i!=0)
            temp1.push_back(nums[i]);
            if(i!=nums.size()-1)
            temp2.push_back(nums[i]);
        }
        return max(rob2(temp1),rob2(temp2));
    }
