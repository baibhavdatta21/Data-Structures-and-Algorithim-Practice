/*
//Recursion
//TC->O(2^n)
//SC->stack spaceo(N)
int solver(int i,vector<int>& nums,int target)
{
    if(target==0)
    {
        return 1;
    }

    if(i==0)
    {
        if(nums[0]==target)
        {
            return 1;
        }
        return 0; 
    }


    int pick=0;
    if(target>=nums[i])
        pick=solver(i-1,nums,target-nums[i]);

    int not_pick=solver(i-1,nums,target);

    return pick + not_pick;
}
int findWays(vector<int> &num, int tar)
{
    // Write your code here.
    return solver(num.size()-1,num,tar);
}*/
//Memoization
//Tc->O(N*M)
//SC->O(N*M)+O(N)
/*int solver(int i,vector<int>& nums,int target, vector<vector<int>>&dp)
{
    if(target==0)
    {
        return 1;
    }

    if(i==0)
    {
        if(nums[0]==target)
        {
            return 1;
        }
        return 0; 
    }
    if(dp[i][target]!=-1)
    return dp[i][target];


    int pick=0;
    if(target>=nums[i])
        pick=solver(i-1,nums,target-nums[i],dp);

    int not_pick=solver(i-1,nums,target,dp);

    return dp[i][target]=pick + not_pick;
}
int findWays(vector<int> &num, int tar)
{
    // Write your code here.
    vector<vector<int>>dp(num.size(),vector<int>(tar+1,-1));
    return solver(num.size()-1,num,tar,dp);
}*/

//Tabulation
//Tc->O(N*M)
//SC->O(N*M)
/*int findWays(vector<int> &num, int tar)
{
   vector<vector<int>>dp(num.size(),vector<int>(tar+1,0));
   for(int i=0;i<num.size();i++)
   {
		dp[i][0]=1;
   }
    if(num[0]<=tar)
    dp[0][num[0]]=1;
    
    for(int i=1;i<num.size();i++)
    {
		for(int j=0;j<=tar;j++)
        {
            int pick=0;
            if(j>=num[i])
            pick=dp[i-1][j-num[i]];
            
			int not_pick=dp[i-1][j];
            
            dp[i][j]=pick + not_pick;
        }
    }
    return dp[num.size()-1][tar];
    
}*/

//Tabulation with space optimiztion
//Tc->O(N*M)
//SC->O(M)+O(M)
int findWays(vector<int> &num, int tar)
{
   
    
    vector<int> prev(tar+1,0);
    vector<int> cur(tar+1,0);
    cur[0]=1;
    prev[0]=1;
    if(num[0]<=tar)
    prev[num[0]]=1;
    for(int i=1;i<num.size();i++)
    {
		for(int j=0;j<=tar;j++)
        {
            int pick=0;
            if(j>=num[i])
            pick=prev[j-num[i]];
            
			int not_pick=prev[j];
            
            cur[j]=pick + not_pick;
        }
        prev=cur;
    }
    return prev[tar];
    
}
