//Tabulation
//Tc->(O(N)+O(N/2)+O(N*Sum)
//Sc->O(N*Sum)

int minDifference(int arr[], int n)
	{
	    int sum=0;
	    for(int i=0;i<n;i++)
	    {
	        sum=sum+arr[i];
	    }
	    vector<vector<bool>> dp(n,vector<bool>(sum+1,0));
	    
	    for(int i=0;i<n;i++)
	    {
	        dp[i][0]=true;
	    }
	    dp[0][arr[0]]=true;
	    
	    for(int i=1;i<n;i++)
	    {
	        for(int j=1;j<=sum;j++)
	        {
	            bool pick=false;
	            if(j>=arr[i])
	            {
	                pick=dp[i-1][j-arr[i]];
	            }
	            bool not_pick=dp[i-1][j];
	            
	            dp[i][j]=pick | not_pick;
	        }
	    }
	    int mini=1e9;
	    
	    for(int i=0;i<=sum/2;i++)
	    {
	        if(dp[n-1][i]==true)
	        mini=min(mini,abs(i-(sum-i)));
	    }
	    return mini;
	}*/
  //Tabulation with space optimization
//Tc->(O(N)+O(N/2)+O(N*Sum)
//Sc->O(Sum)+O(sum)
	int minDifference(int arr[], int n)
	{
	    int sum=0;
	    for(int i=0;i<n;i++)
	    {
	        sum=sum+arr[i];
	    }
	    
	    vector<bool> prev(sum+1,0), cur(sum+1,0);
        prev[0]=cur[0]=true;
        prev[arr[0]]=true;
        
        for(int i=1;i<n;i++)
            {
                for(int j=1;j<=sum;j++)
                {
                    bool pick=false;
                    
                    if(j>=arr[i])
                    pick=prev[j-arr[i]];
                    
                    bool not_pick=prev[j];
                    
                    cur[j]=pick|not_pick;
            
                }
                prev=cur;
            }
	    
	    int mini=1e9;
	    
	    for(int i=0;i<=sum/2;i++)
	    {
	        if(cur[i]==true)
	        mini=min(mini,abs(i-(sum-i)));
	    }
	    return mini;
	}
