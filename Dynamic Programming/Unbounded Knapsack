//Recursion
//Tc->O(2^N)
//Sc->O(N)
int solver(int i,int w, vector<int> &profit, vector<int> &weight)
{
    if(i==0)
    {
        return (w/weight[0])*profit[i];
    }
    int pick=-1e9;
    if(weight[i]<=w)
    pick=profit[i]+solver(i,w-weight[i],profit,weight);
    int not_pick=solver(i-1,w,profit,weight);
    return max(pick,not_pick);
}
int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
    // Write Your Code Here.
    return solver(n-1,w,profit,weight);
    
}
//Memoization
//TC->O(N*M)
//SC->O(N)+O(N*M)
int solver(int i,int w, vector<int> &profit, vector<int> &weight, vector<vector<int>>dp)
{
    if(i==0)
    {
        return (w/weight[0])*profit[i];
    }
    
    if(dp[i][w]!=-1)
    return dp[i][w];
    
    int pick=-1e9;
    if(weight[i]<=w)
    pick=profit[i]+solver(i,w-weight[i],profit,weight,dp);
    int not_pick=solver(i-1,w,profit,weight,dp);
    
    return dp[i][w]=max(pick,not_pick);
}
int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
    // Write Your Code Here.
    vector<vector<int>>dp(n,vector<int>(w+1,-1));
    return solver(n-1,w,profit,weight,dp);
    
    
}
//Tabulation
//Tc->O(N*M)
//Sc->O(N*M)
int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
    vector<vector<int>>dp(n,vector<int>(w+1,0));
    for(int i=0;i<=w;i++)
    {
        dp[0][i]=((int)(i/weight[0]))*profit[0];
    }
    for(int i=1;i<n;i++)
    {
        for(int j=0;j<=w;j++)
        {
            int pick=0;
    		if(weight[i]<=j)
    		pick=profit[i]+dp[i][j-weight[i]];
            
    		int not_pick=dp[i-1][j];
    
    		dp[i][j]=max(pick,not_pick);
        }
    }
    return dp[n-1][w];
}
//Tabulation with space optimization
//Tc->O(N*M)
//Sc->O(M)+O(M)
int unboundedKnapsack(int n, int w, vector<int> &profit, vector<int> &weight)
{
    //vector<vector<int>>dp(n,vector<int>(w+1,0));
    vector<int>prev(w+1,0);
    vector<int>curr(w+1,0);
    for(int i=0;i<=w;i++)
    {
       prev[i]=((int)(i/weight[0]))*profit[0];
    }
    for(int i=1;i<n;i++)
    {
        for(int j=0;j<=w;j++)
        {
            int pick=0;
    		if(weight[i]<=j)
    		pick=profit[i]+curr[j-weight[i]];
            
    		int not_pick=prev[j];
    
    		curr[j]=max(pick,not_pick);
        }
        prev=curr;
    }
    return prev[w];
}
