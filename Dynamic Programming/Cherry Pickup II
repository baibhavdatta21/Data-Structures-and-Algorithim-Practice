//Recursive
//TC->O(3^n+3^n)
//Sc->O(N)
int solver(int i,int j1,int j2,int n,int m,vector<vector<int>>& grid,vector<vector<vector<int>>>&dp)
    {
        if(j1<0 || j2<0 || j1>=m|| j2>=m)
        return -1e8;
        
        if(i==n-1)
        {
            if(j1==j2)
            return grid[i][j1];
            else
            return grid[i][j1]+grid[i][j2];
        }   
        
        if(dp[i][j1][j2]!=-1)
        return dp[i][j1][j2];
        
        int maxi=-1e8;
        for(int a=-1;a<=1;a++)
        {
            for(int b=-1;b<=1;b++)
            {
                int value;
                int num=grid[i][j1]+grid[i][j2]+solver(i+1,j1+a,j2+b,n,m,grid,dp);
                
                if(j1==j2)
                num=num-grid[i][j2];
                
                maxi=max(maxi,num);
                
            }  
            
        }
        return dp[i][j1][j2]=maxi;
        
    }
    //Memoization
    //TC->O(N*M*M)*9
    //Sc->O(N)+O(N*M*M)

        int cherryPickup(vector<vector<int>>& grid) 
    {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<vector<int>>>dp(n,vector<vector<int>>(m,vector<int>(m,-1)));
        
        return solver(0,0,m-1,n,m,grid,dp);
    }*/
    //Tabular
    //TC->O(N*M*M)*9
    //Sc-O(N*M*M)
    /*int cherryPickup(vector<vector<int>>& grid) 
    {
        int n=grid.size();
        int m=grid[0].size();
        vector<vector<vector<int>>>dp(n,vector<vector<int>>(m,vector<int>(m,0)));
        
        for(int j1=0;j1<m;j1++)
        {
            for(int j2=0;j2<m;j2++)
            {
                if(j1==j2)
                {
                    dp[n-1][j1][j2]=grid[n-1][j1];
                }
                else
                {
                    dp[n-1][j1][j2]=grid[n-1][j1]+grid[n-1][j2];
                }
            }
        }
        
        
        for(int i=n-2;i>=0;i--)
        {
            for(int j1=0;j1<m;j1++)
            {
                for(int j2=0;j2<m;j2++)
                {
                    int maxi=-1e8;
                    
                    for(int a=-1;a<=1;a++)
                    {
                        for(int b=-1;b<=1;b++)
                        {
                            int value=0;
                            if(j1==j2)
                            value=grid[i][j1];
                            else
                            value=grid[i][j1]+grid[i][j2];
                            if(j1+a>=0 && j1+a <m && j2+b>=0 && j2+b<m)
                            value=value+dp[i+1][a+j1][b+j2];
                            else
                            value=value-1e8;
                            maxi=max(maxi,value);
                        }  

                    }
                    dp[i][j1][j2]=maxi;
        
                
                }
                
            }
           
            
        }
        return dp[0][0][m-1];
        
    }*/
    
    //Tabular with space optimization
    //TC->O(N*M*M)*9
    //Sc-O(M*M)+O(M*M)
    int cherryPickup(vector<vector<int>>& grid) 
    {
        int n=grid.size();
        int m=grid[0].size();
        //vector<vector<vector<int>>>dp(n,vector<vector<int>>(m,vector<int>(m,0)));
        vector<vector<int>>front(m,vector<int>(m));
        vector<vector<int>>curr(m,vector<int>(m));
        for(int j1=0;j1<m;j1++)
        {
            for(int j2=0;j2<m;j2++)
            {
                if(j1==j2)
                {
                    front[j1][j2]=grid[n-1][j1];
                }
                else
                {
                    front[j1][j2]=grid[n-1][j1]+grid[n-1][j2];
                }
            }
        }
        
        
        for(int i=n-2;i>=0;i--)
        {
            for(int j1=0;j1<m;j1++)
            {
                for(int j2=0;j2<m;j2++)
                {
                    int maxi=-1e8;
                    
                    for(int a=-1;a<=1;a++)
                    {
                        for(int b=-1;b<=1;b++)
                        {
                            int value=0;
                            if(j1==j2)
                            value=grid[i][j1];
                            else
                            value=grid[i][j1]+grid[i][j2];
                            if(j1+a>=0 && j1+a <m && j2+b>=0 && j2+b<m)
                            value=value+front[a+j1][b+j2];
                            else
                            value=value-1e8;
                            maxi=max(maxi,value);
                        }  

                    }
                    curr[j1][j2]=maxi;
        
                
                }
                
            }
            front=curr;
            
        }
        return curr[0][m-1];
        
    }
